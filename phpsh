#!/usr/local/bin/php 
# PHP REPL / Shell - v0.8a - Copyright (c) 2003-<?= date('Y') ?> Weston Cann
# Released under GPL v2
# <?= __FILE__ ?> 
<?php 
ini_set('display_errors',1);
set_include_path(get_include_path() . PATH_SEPARATOR. dirname(__FILE__));
set_error_handler('phpsh_throw_error_exception',E_ALL);
register_shutdown_function('phpsh_on_shutdown');
define('DEFAULT_CRASH','phpsh_crash.hist');
define('DEFAULT_HIST','phpsh.hist');
define('MAIN_PROMPT','phpsh> ');
define('CONT_PROMPT','     â€¦ ');
$history = [];

if(isset($argv)) { // process arguments as php to execute
	foreach($argv as $arg) 
		if($arg != "-r") 
			include_once($arg);
		else
			include_once(DEFAULT_CRASH); 
}

if(is_callable("readline")) { // figure out our readline strategy
	print "# phpsh_readln -> readline\n";
	
	function phpsh_readln($prompt) { 
		return rtrim(readline($prompt)); 
	}
} else {
	print "# phpsh_readln -> /dev/stdin \n";
	print "# (add libreadline or libedit to your php runtime for a better experience!) \n";
	function phpsh_readln($prompt) {
		print $prompt;
		$fp=fopen("/dev/stdin", "r");
    	$input=fgets($fp, 4096);
    	fclose($fp);
    	return rtrim($input);
	}
}

print "# Enter .h for help\n\n";

do { // main read-eval-print loop

	$entry = phpsh_read_entry();

	if(!$entry || !$entry['code']) 
		continue;

	if($entry['code'][0] == '.') {   // it's a phpsh-specific command
		phpsh_cmd(substr($entry,1));
		continue;
	}

	//echo "entry: ",var_export($entry,true),"\n";

	if(($entry['last'] == ';') || ($entry['last'] == '}')) { 
		// statement or block definiton: no return Value
		$evalExp = $entry['code'];
		$type = 'instructions';
	} else {
		// expression: we want to display the value
		$evalExp = "return({$entry['code']});";
		$type = 'expression';
	}

	try {
		$returnval = eval($evalExp);
		if($type == 'expression')
			echo phpsh_showVar($returnval),"\n"; 
		$history[] = $entry['code'];	
		if(function_exists('readline_add_history'))
			readline_add_history($entry['code']);
	} catch(ParseError $last_err) {
		echo "CAUGHT parse error",$last_err,"\n";
	} catch(\Throwable $last_t) {
		echo "CAUGHT ",$last_t,"\n";
		$last_err = $last_t;
	}
	
} while(TRUE);


function phpsh_throw_error_exception($number = 0, $str = '',$file = null,$line = null) {
	throw new ErrorException($str, 0, $number, $file, $line);
	die("control flow shouldn't ever reach here");
}

function phpsh_line_analyze($line) {
	$brace_depth_chg = 0;
	$toks = token_get_all('<?php '.trim($line));
	foreach($toks as $t) {
		switch($t[0] ?? $t) {
			case '{': 
			case T_CURLY_OPEN: $brace_depth_chg++; break;
			//case T_CURLY_CLOSE: doesn't exist? What?
			case '}': $brace_depth_chg--; 
		}
	}
	return [
		'brace_depth_chg' => $brace_depth_chg,
		'last' => $t
	];
}

function phpsh_read_entry() {
	$line = phpsh_readln(MAIN_PROMPT);
	if(empty($line[0]))
		return $line;
	if($line[0] == '.') 
		return $line;

	$brace_depth = 0;
	$done = false;
	do {
		$a = phpsh_line_analyze($line);
		$brace_depth += $a['brace_depth_chg'];
		$lines[] = $line;
		if($brace_depth == 0) {
			$done = true;
			$line = implode("\n",$lines);
		} else
			$line = phpsh_readln(CONT_PROMPT);
	} while (!$done);

	return [
		'last' => $a['last'],
		'code' => $line,
	];
}

function phpsh_cmd($cmdstr) {
	if(!$cmdstr) {
		echo "missing phpsh command\n";
		return false;
	}
	$cmd_parts = preg_split("/\s+/",$cmdstr,null,PREG_SPLIT_NO_EMPTY);
	$cmd = is_array($cmd_parts) ? $cmd_parts[0] : null;
	switch($cmd) {
		case 'q': 
			exit;
		case 's': 
			phpsh_cmd_save($cmd_parts[1] ?? null);
			break;
		case 'l':
			$histfile = $cmd_parts[1] ?? DEFAULT_HIST;
			if(file_exists($histfile)) 
				include($histfile);
			else 
				echo "can't find $histfile\n";
			break;
		case 'r':
			if(file_exists(DEFAULT_CRASH))
				include(DEFAULT_CRASH);
			else 
				echo "can't find ",DEFAULT_CRASH,"\n";
			break;
		case 'h': 
			phpsh_cmd_help();
			break;
		default:
			echo "`$cmdstr`: command not found.\n";
			return false;
	}
	return true;
}

function phpsh_showVar($v) {
	// To Do: deeper inspection?
	$rv = '(phpsh doesn\'t know how to string-ify this variable or result)';

	if(is_array($v)) {
		$rv = array('[');
		foreach($v as $key => $val) 
			array_push($rv,"\n  ",$key,' => ',phpsh_showVar($val));
		if(count($v) > 0) $rv[] = "\n";
		$rv[] = ']';
		$rv = implode('',$rv);
	}
	else if($v === null) 
		$rv = "null";
	else if(is_object($v) && method_exists($v,'__toString')) 
		$rv = $v->__toString();
	else 
		$rv = var_export($v,true);

	return $rv;
}



function phpsh_cmd_save($filename,$avoid_last=false) {
	global $history;
	if(!$filename) {
		$filename = DEFAULT_HIST;
		echo "save command .s needs target file, using ",DEFAULT_HIST," in current working directory ",getcwd(),"\n";
	} 
	if($avoid_last) 
		array_pop($history);
	$output = "<?php \n\n".implode(";\n",$history).";";
	if(!file_put_contents($filename,$output))
		echo "error writing file $filename\n";
	else
		echo "saved history to $filename\n";
}

function phpsh_cmd_help() {
	$default_crash = DEFAULT_CRASH;
	echo <<<EOD
Available phpsh commands:
  .h       - prints this command list
  .s <arg> - saves command history to filename <arg>
  .l <arg> - shortcut for include(<arg>)
  .r       - shortcut for include("$default_crash")
  .q       - quit

Beyond that, everything else is simply filtered through PHP's `eval` function. phpsh will attempt to automatically yield a string representation of entries that don't end with a semi-colon or a block delimiter. 

EOD;
}

function phpsh_on_shutdown() {
	$err = error_get_last();	
	if($err && ($err['type'] === E_ERROR)) {
		phpsh_cmd_save(DEFAULT_CRASH);
		echo "history saved to ",DEFAULT_CRASH,", use .r on next run to replay";
	}
	echo "\n";
}
?>
